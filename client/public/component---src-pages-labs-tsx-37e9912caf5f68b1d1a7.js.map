{"version":3,"sources":["webpack:///./src/molecules/categories-data.tsx","webpack:///./src/images/Labs_BG-SVG.svg","webpack:///./src/pages/labs.tsx"],"names":["useCategoriesQuery","data","useStaticQuery","extractCategories","categories","categoryOptions","push","id","value","label","map","category","title","convertCategoriesToOptions","craftAPI","module","exports","LabsPage","props","useState","filterCategory","labEntries","entries","LandingPage","entry","filteredLabEntries","filter","articleCategories","isMobile","useMedia","className","theme","slug","path","style","width","opacity","src","labsBg","alt","labsTitleSVG","articleExcerpt","variant","md","entryType"],"mappings":"8FAAA,kDAGaA,EAAqB,WAChC,IAAMC,EAAOC,yBAAc,cAY3B,OAAOC,EAAkBF,IAuBrBE,EAAoB,SAACF,GAKzB,OAzBiC,SAACG,GAClC,IAAMC,EAAkB,GAgBxB,OAdAA,EAAgBC,KAAK,CACnBC,GAAI,IACJC,MAAO,MACPC,MAAO,QAGTL,EAAWM,KAAI,SAACC,GACdN,EAAgBC,KAAK,CACnBC,GAAII,EAASJ,GACbC,MAAOG,EAASC,MAChBH,MAAOE,EAASC,WAIbP,EAQAQ,CAFHZ,EADFa,SAAYV,c,uBCzChBW,EAAOC,QAAU,IAA0B,mC,oCCA3C,kJAiHeC,UA9FE,SAACC,GAChB,MAA4CC,mBAAS,CACnDX,MAAO,MACPC,MAAO,QAFFW,EAAP,KAKA,GALA,KASIF,EAHFjB,KACEa,UAAqBO,EAFzB,EAEgBC,QAA4BC,EAF5C,EAEqCC,MAM/BC,GAFUzB,cAEWqB,EAAWK,QAAO,SAACF,GAC5C,MAA6B,QAAzBJ,EAAeX,OAICe,EAAMG,kBAAkBjB,KAAI,SAACC,GAC/C,OAAIA,EAASC,QAAUQ,EAAeX,SAMxB,GAVPe,OAUT,MAKII,EAAWC,YAAS,sBAE1B,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAgBC,UAAU,wBAAwBC,MAAM,QACtD,kBAAC,IAAD,CAAKnB,MAAM,OAAOoB,KAAMd,EAAMe,OAC9B,yBAAKH,UAAU,iBACb,yBACEI,MAAO,CACLC,MAAQP,EAAoB,OAAT,OACnBQ,QAAS,OAEXN,UAAU,uHACVO,IAAKC,IACLC,IAAI,KAEN,yBAAKT,UAAU,iDACb,0BAAMA,UAAU,aACd,yBACEA,UAAU,wCACVO,IAAKG,IACLD,IAAI,OAIV,yBAAKT,UAAU,mCACVP,EAAYkB,gBACb,kBAAC,IAAD,CACEX,UAAU,wCACVY,QAAQ,KACRC,GAAG,MAEFpB,EAAYkB,gBAWS,QAAzBrB,EAAeZ,MACd,kBAAC,IAAD,CACEc,QAASD,EACTuB,UAAU,OACVb,MAAM,SAGR,kBAAC,IAAD,CACET,QAASG,EACTmB,UAAU,OACVb,MAAM","file":"component---src-pages-labs-tsx-37e9912caf5f68b1d1a7.js","sourcesContent":["import { graphql, useStaticQuery } from 'gatsby'\nimport { pipe, groupBy, mapValues, orderBy, cloneDeep } from 'lodash/fp'\n\nexport const useCategoriesQuery = () => {\n  const data = useStaticQuery<GatsbyTypes.CategoriesQuery>(\n    graphql`\n      query Categories {\n        craftAPI {\n          categories(group: \"articleCategories\") {\n            id\n            title\n          }\n        }\n      }\n    `\n  )\n  return extractCategories(data)\n}\n\nconst convertCategoriesToOptions = (categories) => {\n  const categoryOptions = []\n\n  categoryOptions.push({\n    id: '1',\n    value: 'all',\n    label: 'All',\n  })\n\n  categories.map((category) => {\n    categoryOptions.push({\n      id: category.id,\n      value: category.title,\n      label: category.title,\n    })\n  })\n\n  return categoryOptions\n}\n\nconst extractCategories = (data: any) => {\n  const {\n    craftAPI: { categories },\n  } = data\n\n  return convertCategoriesToOptions(categories)\n}\n\n// export type HeaderBoatMenuCategories =\n//   | 'all'\n//   | 'centerConsole'\n//   | 'heritage'\n//   | 'performance'\n//   | 'none'\n\n// export type HeaderBoat = {\n//   boatName: string\n//   menuName: string\n//   menuOrder: Number\n//   menuCategory: string\n//   slug: string\n//   stats: Stat[]\n//   backgroundMedia: {\n//     image: {\n//       publicUrl: string\n//     }\n//     alt: GatsbyTypes.Maybe<string>\n//   }\n// }\n\n// const extractBoats = (data: GatsbyTypes.HeaderBoatsMenuQuery) => {\n//   // Use .flatMap to convince Typescript that there will never be\n//   // `undefined` values in the array... 🤦‍♂️\n//   const menuItems: HeaderBoat[] | undefined = data.craftAPI.entries?.flatMap(\n//     (entry) => {\n//       if (entry?.__typename !== 'CraftAPI_boats_boats_Entry') {\n//         return []\n//       }\n//       return {\n//         boatName: entry?.title!,\n//         menuName: entry?.boatMetadata?.[0]?.menuName! || entry?.boatNameLong!,\n//         menuOrder: (entry?.boatMetadata?.[0]?.menuSortOrder as Number) || 0,\n//         menuCategory: entry?.boatMetadata?.[0]?.menuCategory || 'none',\n//         slug: entry?.slug!,\n//         stats: entry?.stats?.map(\n//           (stat) =>\n//             ({\n//               label: stat?.label!,\n//               percentage: stat?.percentage! as Number,\n//               text: stat?.text!,\n//             } as Stat)\n//         )!,\n//         backgroundMedia: {\n//           image: {\n//             publicUrl: entry?.backgroundMedia?.[0]?.image?.[0]?.url!,\n//           },\n//           alt: entry?.backgroundMedia?.[0]?.alt,\n//         },\n//       }\n//     }\n//   )\n\n//   const menuItemsClone = cloneDeep(menuItems)\n\n//   const menuItemsAll = menuItemsClone?.map((item) => {\n//     item.menuCategory = 'all'\n//     return item\n//   })\n\n//   const menuItemsWithAll = menuItemsAll?.concat(menuItems)\n\n//   const preparedMenuItems = pipe(\n//     groupBy('menuCategory'),\n//     mapValues(orderBy(['menuOrder'])(['asc']))\n//   )(menuItemsWithAll) as Record<HeaderBoatMenuCategories, typeof menuItems>\n\n//   return preparedMenuItems\n// }\n\n// export const categoriesToDisplay: Record<HeaderBoatMenuCategories, string> = {\n//   all: 'All Boats',\n//   centerConsole: 'Performance Center Console',\n//   performance: 'High Performance',\n//   heritage: '',\n//   none: '',\n// }\n","module.exports = __webpack_public_path__ + \"static/Labs_BG-SVG.2fe7979f.svg\";","import React, { Fragment, useState } from 'react'\nimport clsx from 'clsx'\nimport styled from 'styled-components'\nimport { PageProps, graphql, Link } from 'gatsby'\nimport { Layout } from '../components/layout'\nimport { Typography } from '../atoms/typography'\nimport { AspectRatio } from '../atoms/aspect-ratio'\nimport SEO from '../components/seo'\nimport { useCategoriesQuery } from '../molecules/categories-data'\nimport { useMedia } from 'react-use'\nimport {\n  CategoryFilter,\n  FilteredList,\n  GenericSection,\n  UnFilteredList,\n} from '../templates/common.components'\nimport labsBg from '../images/Labs_BG-SVG.svg'\nimport labsTitleSVG from '../images/labs-title.svg'\n\nconst LabsPage = (props: PageProps<GatsbyTypes.LabsLandingPageQuery>) => {\n  const [filterCategory, setFilterCategory] = useState({\n    value: 'all',\n    label: 'All',\n  })\n\n  const {\n    data: {\n      craftAPI: { entries: labEntries, entry: LandingPage },\n    },\n  } = props\n\n  const options = useCategoriesQuery()\n\n  const filteredLabEntries = labEntries.filter((entry) => {\n    if (filterCategory.label === 'All') {\n      return entry\n    }\n\n    const hasCategory = entry.articleCategories.map((category) => {\n      if (category.title === filterCategory.label) {\n        return true\n      } else {\n        return false\n      }\n    })\n    if (hasCategory[0]) {\n      return entry\n    }\n  })\n\n  const isMobile = useMedia('(max-width: 767px)')\n\n  return (\n    <Layout>\n      <GenericSection className=\"py-12 pt-48 bg-gray-0\" theme=\"dark\">\n        <SEO title=\"Labs\" slug={props.path} />\n        <div className=\"relative px-4\">\n          <img\n            style={{\n              width: !isMobile ? '100%' : '220%',\n              opacity: '35%',\n            }}\n            className=\"pointer-events-none block max-w-none absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 md:-mt-16\"\n            src={labsBg}\n            alt=\"\"\n          />\n          <div className=\"relative flex md:justify-center mb-8 md:mb-16\">\n            <span className=\"lowercase\">\n              <img\n                className=\"max-w-xs md:max-w-xl pl-4 pr-8 md:p-0\"\n                src={labsTitleSVG}\n                alt=\"\"\n              />\n            </span>\n          </div>\n          <div className=\"md:flex items-center flex-col\">\n            {!!LandingPage.articleExcerpt && (\n              <Typography\n                className=\"mb-24 md:text-center max-w-2xl m-auto\"\n                variant=\"p3\"\n                md=\"p1\"\n              >\n                {LandingPage.articleExcerpt}\n              </Typography>\n            )}\n            {/* <CategoryFilter\n              className=\"mb-24 md:hidden\"\n              placeholder=\"Explore _Labs\"\n              theme=\"dark\"\n              categories={options}\n              setFilterCategory={setFilterCategory}\n              filterCategory={filterCategory}\n            /> */}\n            {filterCategory.value === 'all' ? (\n              <UnFilteredList\n                entries={labEntries}\n                entryType=\"labs\"\n                theme=\"dark\"\n              />\n            ) : (\n              <FilteredList\n                entries={filteredLabEntries}\n                entryType=\"labs\"\n                theme=\"dark\"\n              />\n            )}\n          </div>\n        </div>\n      </GenericSection>\n    </Layout>\n  )\n}\n\nexport default LabsPage\n\nexport const query = graphql`\n  query LabsLandingPage {\n    craftAPI {\n      entry(type: \"labs\") {\n        ... on CraftAPI_labs_labs_Entry {\n          slug\n          articleExcerpt\n          title\n        }\n      }\n      entries(type: \"lab\", hasDescendants: false) {\n        id\n        slug\n        title\n        typeHandle\n        ... on CraftAPI_labs_lab_Entry {\n          articleCategories {\n            title\n          }\n          articleExcerpt\n          image {\n            url\n          }\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}