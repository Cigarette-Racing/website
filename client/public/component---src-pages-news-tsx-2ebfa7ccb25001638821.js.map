{"version":3,"sources":["webpack:///./src/molecules/categories-data.tsx","webpack:///./src/pages/news.tsx"],"names":["useCategoriesQuery","data","useStaticQuery","extractCategories","categories","categoryOptions","push","id","value","label","map","category","title","convertCategoriesToOptions","craftAPI","NewsArticlesPage","props","useState","filterCategory","landingPageTitle","articleEntries","entries","LandingPage","entry","filteredEntries","filter","articleCategories","className","slug","path","articleExcerpt","variant","md","entryType"],"mappings":"8FAAA,kDAGaA,EAAqB,WAChC,IAAMC,EAAOC,yBAAc,cAY3B,OAAOC,EAAkBF,IAuBrBE,EAAoB,SAACF,GAKzB,OAzBiC,SAACG,GAClC,IAAMC,EAAkB,GAgBxB,OAdAA,EAAgBC,KAAK,CACnBC,GAAI,IACJC,MAAO,MACPC,MAAO,QAGTL,EAAWM,KAAI,SAACC,GACdN,EAAgBC,KAAK,CACnBC,GAAII,EAASJ,GACbC,MAAOG,EAASC,MAChBH,MAAOE,EAASC,WAIbP,EAQAQ,CAFHZ,EADFa,SAAYV,c,kCCzChB,4FA0FeW,UAzEU,SACvBC,GAEA,MAA4CC,mBAAS,CACnDT,MAAO,MACPC,MAAO,QAFFS,EAAP,KAKA,GALA,KAKgDD,mBAAS,SAAlDE,EAAP,KAEA,GAFA,KAMIH,EAHFf,KACEa,UAAqBM,EAFzB,EAEgBC,QAAgCC,EAFhD,EAEyCC,MAMnCC,GAFUxB,cAEQoB,EAAeK,QAAO,SAACF,GAC7C,MAA6B,QAAzBL,EAAeT,OAICc,EAAMG,kBAAkBhB,KAAI,SAACC,GAC/C,OAAIA,EAASC,QAAUM,EAAeT,SAOxB,GAXPc,OAWT,MAKF,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAgBI,UAAU,eACxB,kBAAC,IAAD,CAAKf,MAAM,OAAOgB,KAAMZ,EAAMa,OAC9B,yBAAKF,UAAU,mKACb,8BAAOR,IAGT,yBAAKQ,UAAU,iCACVL,EAAYQ,gBACb,kBAAC,IAAD,CACEH,UAAU,wCACVI,QAAQ,KACRC,GAAG,MAEFV,EAAYQ,gBAWS,QAAzBZ,EAAeV,MACd,kBAAC,IAAD,CAAgBa,QAASD,EAAgBa,UAAU,SAEnD,kBAAC,IAAD,CAAcZ,QAASG,EAAiBS,UAAU","file":"component---src-pages-news-tsx-2ebfa7ccb25001638821.js","sourcesContent":["import { graphql, useStaticQuery } from 'gatsby'\nimport { pipe, groupBy, mapValues, orderBy, cloneDeep } from 'lodash/fp'\n\nexport const useCategoriesQuery = () => {\n  const data = useStaticQuery<GatsbyTypes.CategoriesQuery>(\n    graphql`\n      query Categories {\n        craftAPI {\n          categories(group: \"articleCategories\") {\n            id\n            title\n          }\n        }\n      }\n    `\n  )\n  return extractCategories(data)\n}\n\nconst convertCategoriesToOptions = (categories) => {\n  const categoryOptions = []\n\n  categoryOptions.push({\n    id: '1',\n    value: 'all',\n    label: 'All',\n  })\n\n  categories.map((category) => {\n    categoryOptions.push({\n      id: category.id,\n      value: category.title,\n      label: category.title,\n    })\n  })\n\n  return categoryOptions\n}\n\nconst extractCategories = (data: any) => {\n  const {\n    craftAPI: { categories },\n  } = data\n\n  return convertCategoriesToOptions(categories)\n}\n\n// export type HeaderBoatMenuCategories =\n//   | 'all'\n//   | 'centerConsole'\n//   | 'heritage'\n//   | 'performance'\n//   | 'none'\n\n// export type HeaderBoat = {\n//   boatName: string\n//   menuName: string\n//   menuOrder: Number\n//   menuCategory: string\n//   slug: string\n//   stats: Stat[]\n//   backgroundMedia: {\n//     image: {\n//       publicUrl: string\n//     }\n//     alt: GatsbyTypes.Maybe<string>\n//   }\n// }\n\n// const extractBoats = (data: GatsbyTypes.HeaderBoatsMenuQuery) => {\n//   // Use .flatMap to convince Typescript that there will never be\n//   // `undefined` values in the array... 🤦‍♂️\n//   const menuItems: HeaderBoat[] | undefined = data.craftAPI.entries?.flatMap(\n//     (entry) => {\n//       if (entry?.__typename !== 'CraftAPI_boats_boats_Entry') {\n//         return []\n//       }\n//       return {\n//         boatName: entry?.title!,\n//         menuName: entry?.boatMetadata?.[0]?.menuName! || entry?.boatNameLong!,\n//         menuOrder: (entry?.boatMetadata?.[0]?.menuSortOrder as Number) || 0,\n//         menuCategory: entry?.boatMetadata?.[0]?.menuCategory || 'none',\n//         slug: entry?.slug!,\n//         stats: entry?.stats?.map(\n//           (stat) =>\n//             ({\n//               label: stat?.label!,\n//               percentage: stat?.percentage! as Number,\n//               text: stat?.text!,\n//             } as Stat)\n//         )!,\n//         backgroundMedia: {\n//           image: {\n//             publicUrl: entry?.backgroundMedia?.[0]?.image?.[0]?.url!,\n//           },\n//           alt: entry?.backgroundMedia?.[0]?.alt,\n//         },\n//       }\n//     }\n//   )\n\n//   const menuItemsClone = cloneDeep(menuItems)\n\n//   const menuItemsAll = menuItemsClone?.map((item) => {\n//     item.menuCategory = 'all'\n//     return item\n//   })\n\n//   const menuItemsWithAll = menuItemsAll?.concat(menuItems)\n\n//   const preparedMenuItems = pipe(\n//     groupBy('menuCategory'),\n//     mapValues(orderBy(['menuOrder'])(['asc']))\n//   )(menuItemsWithAll) as Record<HeaderBoatMenuCategories, typeof menuItems>\n\n//   return preparedMenuItems\n// }\n\n// export const categoriesToDisplay: Record<HeaderBoatMenuCategories, string> = {\n//   all: 'All Boats',\n//   centerConsole: 'Performance Center Console',\n//   performance: 'High Performance',\n//   heritage: '',\n//   none: '',\n// }\n","import React, { Fragment, useState } from 'react'\nimport clsx from 'clsx'\nimport { PageProps, graphql } from 'gatsby'\nimport Select, { components } from 'react-select'\nimport { CaretDownIcon } from '../svgs/icons'\nimport { Layout } from '../components/layout'\nimport { Typography } from '../atoms/typography'\nimport SEO from '../components/seo'\nimport { useCategoriesQuery } from '../molecules/categories-data'\nimport {\n  CategoryFilter,\n  DropdownNav,\n  FilteredList,\n  GenericSection,\n  UnFilteredList,\n} from '../templates/common.components'\n\nconst NewsArticlesPage = (\n  props: PageProps<GatsbyTypes.newsArticlesPageQuery>\n) => {\n  const [filterCategory, setFilterCategory] = useState({\n    value: 'all',\n    label: 'All',\n  })\n\n  const [landingPageTitle, setLandingPageTitle] = useState('News')\n\n  const {\n    data: {\n      craftAPI: { entries: articleEntries, entry: LandingPage },\n    },\n  } = props\n\n  const options = useCategoriesQuery()\n\n  const filteredEntries = articleEntries.filter((entry) => {\n    if (filterCategory.label === 'All') {\n      return entry\n    }\n\n    const hasCategory = entry.articleCategories.map((category) => {\n      if (category.title === filterCategory.label) {\n        return true\n      } else {\n        return false\n      }\n    })\n\n    if (hasCategory[0]) {\n      return entry\n    }\n  })\n\n  return (\n    <Layout>\n      <GenericSection className=\"py-12 pt-48\">\n        <SEO title=\"News\" slug={props.path} />\n        <div className=\"relative flex justify-center tracking-wide text-gray-5 capitalize whitespace-no-wrap font-normal text-9xl lg:text-huge leading-10 font-heading mb-8 text-center\">\n          <span>{landingPageTitle}</span>\n        </div>\n\n        <div className=\"px-4 max-w-screen-xl m-auto\">\n          {!!LandingPage.articleExcerpt && (\n            <Typography\n              className=\"mb-24 md:text-center max-w-2xl m-auto\"\n              variant=\"p3\"\n              md=\"p1\"\n            >\n              {LandingPage.articleExcerpt}\n            </Typography>\n          )}\n          {/* <CategoryFilter\n            className=\"mb-24 md:hidden\"\n            placeholder=\"Explore Stories\"\n            theme=\"light\"\n            categories={options}\n            setFilterCategory={setFilterCategory}\n            filterCategory={filterCategory}\n          /> */}\n          {filterCategory.value === 'all' ? (\n            <UnFilteredList entries={articleEntries} entryType=\"news\" />\n          ) : (\n            <FilteredList entries={filteredEntries} entryType=\"news\" />\n          )}\n        </div>\n      </GenericSection>\n    </Layout>\n  )\n}\n\nexport default NewsArticlesPage\n\nexport const query = graphql`\n  query NewsArticleLandingPage {\n    craftAPI {\n      entries(type: \"newsArticle\") {\n        ... on CraftAPI_newsArticles_newsArticle_Entry {\n          dateCreated\n          slug\n          id\n          articleExcerpt\n          title\n          image {\n            url\n          }\n          articleCategories {\n            id\n            title\n          }\n          articleTags {\n            id\n            title\n          }\n        }\n      }\n      entry(type: \"newsArticles\") {\n        ... on CraftAPI_newsArticles_newsArticles_Entry {\n          slug\n          id\n          title\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}